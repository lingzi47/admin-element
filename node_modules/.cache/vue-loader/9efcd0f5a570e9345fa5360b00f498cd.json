{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\预见未来后台管理系统\\后台\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\预见未来后台管理系统\\后台\\src\\views\\shop\\special\\specialgoods\\components\\fileFu.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\预见未来后台管理系统\\后台\\src\\views\\shop\\special\\specialgoods\\components\\fileFu.vue","mtime":1665648759894},{"path":"C:\\Users\\Administrator\\Desktop\\预见未来后台管理系统\\后台\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\预见未来后台管理系统\\后台\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\预见未来后台管理系统\\后台\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\预见未来后台管理系统\\后台\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\预见未来后台管理系统\\后台\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\预见未来后台管理系统\\后台\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouZWRpdG9yIHsNCiAgd2lkdGg6IDEwMCU7DQogIG1hcmdpbjogYXV0bzsNCiAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0K"},{"version":3,"sources":["fileFu.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuGA;AACA;AACA;AACA;AACA","file":"fileFu.vue","sourceRoot":"src/views/shop/explosives/explosivesgoods/components","sourcesContent":["<template lang=\"html\">\r\n    <div class=\"editor\">\r\n        <div ref=\"editor\" class=\"textNeirong\"></div>\r\n        \r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport E from \"wangeditor\";\r\n\r\nexport default {\r\n  name: \"editoritem\",\r\n  data() {\r\n    return {\r\n      editor: null,\r\n      info_: null,\r\n    };\r\n  },\r\n  model: {\r\n    prop: \"value\",\r\n    event: \"change\",\r\n  },\r\n  props: {\r\n    value: {\r\n      type: String,\r\n      default: \"\",\r\n    },\r\n    isClear: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  watch: {\r\n    isClear(val) {\r\n      // 触发清除文本域内容\r\n      if (val) {\r\n        this.editor.txt.clear();\r\n        this.info_ = null;\r\n      }\r\n    },\r\n    value: function (value) {\r\n      if (value !== this.editor.txt.html()) {\r\n        this.editor.txt.html(this.value);\r\n        value;\r\n      }\r\n    },\r\n    //value为编辑框输入的内容，这里我监听了一下值，当父组件调用得时候，如果给value赋值了，子组件将会显示父组件赋给的值\r\n  },\r\n  mounted() {\r\n    this.seteditor();\r\n    this.editor.txt.html(this.value);\r\n  },\r\n  methods: {\r\n    seteditor() {\r\n      this.editor = new E(this.$refs.editor);\r\n      this.editor.config.uploadImgShowBase64 = false; // base 64 存储图片\r\n      this.editor.config.uploadImgServer =\r\n        \"https://y4.wjw.cool/command/ossUpload?filename=img_e\"; // 填写配置服务器端地址\r\n      // this.editor.config.uploadImgHeaders = { 'Authorization': this.token }// 自定义 header\r\n      this.editor.config.uploadFileName = \"img_e\"; // 后端接受上传文件的参数名\r\n      this.editor.config.uploadImgMaxSize = 8 * 1024 * 1024; // 将图片大小限制为 2M\r\n      this.editor.config.uploadImgMaxLength = 6; // 限制一次最多上传 6 张图片\r\n      this.editor.config.uploadImgTimeout = 3 * 60 * 1000; // 设置超时时间\r\n      // 自定义 onchange 触发的延迟时间，默认为 200 ms\r\n      this.editor.config.onchangeTimeout = 1000; // 单位 ms\r\n      this.editor.config.onchange = (html) => {\r\n        this.info_ = html; // 绑定当前逐渐地值\r\n        const regex = new RegExp(\"<img\", \"gi\");\r\n        this.info_ = html.replace(regex, `<img style=\"max-width:'';\"`);\r\n        this.$emit(\"change\", this.info_); // 将内容同步到父组件中\r\n        //console.log(this.info_);\r\n      };\r\n      // 创建富文本编辑器\r\n      this.editor.create();\r\n\r\n      this.editor.config.uploadImgHooks = {\r\n        fail: (xhr, editor, result) => {\r\n          // 插入图片失败回调\r\n        },\r\n        success: (xhr, editor, result) => {\r\n          // 图片上传成功回调\r\n        },\r\n        timeout: (xhr, editor) => {\r\n          // 网络超时的回调\r\n        },\r\n        error: (xhr, editor) => {\r\n          // 图片上传错误的回调\r\n        },\r\n        customInsert: (insertImg, result, editor) => {\r\n          //循环插入图片\r\n\r\n          //console.log(result.data);\r\n          const imgUrl = result.data;\r\n\r\n          insertImg(imgUrl);\r\n        },\r\n      };\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.editor {\r\n  width: 100%;\r\n  margin: auto;\r\n  position: relative;\r\n}\r\n</style>\r\n"]}]}